@page "/products"
@using ClientApp.Models
@using ClientApp.Services
@inject IProductService ProductService
@inject CartService CartService
@inject NavigationManager NavigationManager

<PageTitle>Catálogo de Productos</PageTitle>

<div class="container">
    <h3 class="my-4">Catálogo de Productos</h3>

    @if (products == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!products.Any())
    {
        <div class="alert alert-info">No hay productos disponibles.</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var product in products)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text">@product.Description</p>
                            <p class="card-text fw-bold">Precio: $@product.Price.ToString("F2")</p>
                            <p class="card-text @(product.StockQuantity > 0 ? "text-success" : "text-danger")">
                                Stock: @product.StockQuantity @(product.StockQuantity > 0 ? "unidades" : "- Agotado")
                            </p>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                <input type="number" class="form-control form-control-sm w-25"
                                       min="1" max="@product.StockQuantity" @bind="quantities[product.Id]" />
                                <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product)"
                                        disabled="@(product.StockQuantity <= 0)">
                                    Agregar al carrito
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ProductDto>? products;
    private Dictionary<int, int> quantities = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
        
        // Inicializar cantidades
        if (products != null)
        {
            foreach (var product in products)
            {
                quantities[product.Id] = 1;
            }
        }
    }

    private void AddToCart(ProductDto product)
    {
        if (product.StockQuantity <= 0)
            return;
            
        int quantity = quantities.ContainsKey(product.Id) ? quantities[product.Id] : 1;
        
        CartService.AddItem(product, quantity);
        
        // Reiniciar la cantidad a 1 después de agregar al carrito
        quantities[product.Id] = 1;
    }
}